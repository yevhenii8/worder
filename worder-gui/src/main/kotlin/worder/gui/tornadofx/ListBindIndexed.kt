/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <ListBindIndexed.kt>
 * Created: <10/07/2020, 10:35:52 PM>
 * Modified: <02/08/2020, 07:20:37 PM>
 * Version: <6>
 */

package worder.gui.tornadofx

import javafx.beans.WeakListener
import javafx.collections.ListChangeListener
import javafx.collections.ObservableList
import javafx.event.EventTarget
import javafx.scene.Node
import tornadofx.FX
import tornadofx.getChildList
import java.lang.ref.WeakReference

fun <T> EventTarget.bindChildrenIndexed(
        sourceList: ObservableList<T>,
        converter: (Int, T) -> Node
): IndexedListConversionListener<T, Node> = requireNotNull(getChildList()?.bindIndexed(sourceList, converter)) {
    "Unable to extract child nodes from $this"
}

@Suppress("DuplicatedCode")
fun <SourceType, TargetType> MutableList<TargetType>.bindIndexed(
        sourceList: ObservableList<SourceType>,
        converter: (Int, SourceType) -> TargetType
): IndexedListConversionListener<SourceType, TargetType> {
    val ignoringParentBuilder = FX::class.java.methods.find { it.name == "access\$setIgnoreParentBuilder\$cp" }!!
    val ignoringParentConverter: (Int, SourceType) -> TargetType = { index, source ->
        ignoringParentBuilder.invoke(FX, FX.IgnoreParentBuilder.Once)
        try {
            converter(index, source)
        } finally {
            ignoringParentBuilder.invoke(FX, FX.IgnoreParentBuilder.No)
        }
    }

    clear()
    addAll(sourceList.mapIndexed(ignoringParentConverter))

    val listener = IndexedListConversionListener(this, ignoringParentConverter)
    sourceList.addListener(listener)

    return listener
}

class IndexedListConversionListener<SourceType, TargetType>(
        targetList: MutableList<TargetType>,
        private val converter: (Int, SourceType) -> TargetType
) : ListChangeListener<SourceType>, WeakListener {
    private val targetRef: WeakReference<MutableList<TargetType>> = WeakReference(targetList)


    override fun onChanged(change: ListChangeListener.Change<out SourceType>) {
        val list = targetRef.get()
        val originalList = change.list

        if (list == null) {
            originalList.removeListener(this)
            return
        }

        while (change.next()) {
            when {
                change.wasPermutated() -> {
                    list.subList(change.from, change.to).clear()
                    list.addAll(change.from, change.list.subList(change.from, change.to).map { converter(originalList.indexOf(it), it) })
                }
                change.wasRemoved() -> {
                    list.subList(change.from, change.from + change.removedSize).clear()
                }
                change.wasAdded() -> {
                    list.addAll(change.from, change.addedSubList.map { converter(originalList.indexOf(it), it) })
                }
            }
        }
    }

    override fun wasGarbageCollected() = targetRef.get() == null

    override fun hashCode() = targetRef.get().hashCode()

    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true

        if (other is IndexedListConversionListener<*, *>)
            return targetRef.get() == other.targetRef.get()

        return false
    }
}
