/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <WordBlockFragment.kt>
 * Created: <24/07/2020, 07:45:55 PM>
 * Modified: <02/12/2020, 09:18:45 PM>
 * Version: <388>
 */

package worder.gui.update.ui

import javafx.collections.ObservableList
import javafx.geometry.Pos
import javafx.scene.Parent
import javafx.scene.control.ComboBox
import javafx.scene.input.KeyCode
import javafx.scene.layout.Priority
import javafx.scene.paint.Color
import javafx.scene.web.WebView
import tornadofx.Fragment
import tornadofx.View
import tornadofx.box
import tornadofx.combobox
import tornadofx.hbox
import tornadofx.hgrow
import tornadofx.label
import tornadofx.onChange
import tornadofx.onChangeOnce
import tornadofx.paddingVertical
import tornadofx.px
import tornadofx.separator
import tornadofx.style
import tornadofx.toObservable
import tornadofx.tooltip
import tornadofx.usePrefSize
import tornadofx.vbox
import tornadofx.warning
import tornadofx.webview
import worder.gui.core.formatted
import worder.gui.core.worderStatusLabel
import worder.gui.database.model.DatabaseWord
import worder.gui.update.UpdateTabView
import worder.gui.update.model.WordBlock
import java.time.Instant

class WordBlockFragment : Fragment() {
    private val block: WordBlock by param()
    private val clFragment: CommandLineFragment by param()

    private val word: DatabaseWord = block.originalWord
    private val possibleResolutions: ObservableList<WordBlock.WordBlockResolution>
    private val resolutionUI: ComboBox<WordBlock.WordBlockResolution>
    private val clHandler: ClHandler = ClHandler()

    private val choosableDefinitions: ChoosableValues<String> = ChoosableValues(block.definitions, chooseLimit = 2)
    private val chosenDefinitions = choosableDefinitions.chosenValues
    private val choosableExamples: ChoosableValues<String> = ChoosableValues(block.examples)
    private val chosenExamples = choosableExamples.chosenValues


    init {
        with(block.statusProperty) {
            onChange { status ->
                if (status == WordBlock.WordBlockStatus.COMMITTED)
                    root.isDisable = true
            }
        }

        possibleResolutions = WordBlock.WordBlockResolution.values()
                .filter { it != WordBlock.WordBlockResolution.UPDATED }
                .toList()
                .toObservable()

        resolutionUI = combobox(values = possibleResolutions) {
            value = block.resolution

            valueProperty().onChange { chosenResolution ->
                when (chosenResolution) {
                    WordBlock.WordBlockResolution.UPDATED -> block.update(
                            primaryDefinition = chosenDefinitions[0],
                            secondaryDefinition = if (chosenDefinitions.size > 1) chosenDefinitions[1] else null,
                            transcription = block.transcriptions.firstOrNull(),
                            examples = chosenExamples
                    )
                    WordBlock.WordBlockResolution.REMOVED -> block.remove()
                    WordBlock.WordBlockResolution.LEARNED -> block.learn()
                    WordBlock.WordBlockResolution.SKIPPED -> block.skip()
                    WordBlock.WordBlockResolution.NO_RESOLUTION -> error("You can't change presented resolution with NO_RESOLUTION!")
                }
            }

            valueProperty().onChangeOnce {
                possibleResolutions.remove(WordBlock.WordBlockResolution.NO_RESOLUTION)
            }
        }

        chosenDefinitions.onChange {
            val size = it.list.size

            when {
                size > 0 && !possibleResolutions.contains(WordBlock.WordBlockResolution.UPDATED) -> {
                    possibleResolutions.add(WordBlock.WordBlockResolution.UPDATED)
                }
                size == 0 -> possibleResolutions.remove(WordBlock.WordBlockResolution.UPDATED)
            }
        }
    }


    override val root: Parent = vbox(spacing = 10) {
        style {
            padding = box(10.px)
            borderRadius += box(10.px)
            borderColor += box(Color.GRAY)
        }

        hbox(20) {
            label(block.id) {
                usePrefSize = true
                style {
                    fontSize = 20.px
                    alignment = Pos.TOP_CENTER
                    padding = box(20.px)
                    borderColor += box(Color.GRAY)
                }
            }

            vbox {
                paddingVertical = 10

                label("${word.name.toUpperCase()} (?)") {
                    style {
                        fontSize = 16.px
                        padding = box(0.px, 0.px, 5.px, 0.px)
                    }

                    tooltip {
                        graphic = hbox {
                            vbox(alignment = Pos.BASELINE_RIGHT) {
                                label("Rate: ")
                                label("Registered: ")
                                label("Last Modified: ")
                                label("Last Rate Modified: ")
                                label("Last Trained: ")
                            }
                            vbox(alignment = Pos.BASELINE_LEFT) {
                                label("${word.rate} %")
                                label(Instant.ofEpochMilli(word.registered).formatted())
                                label(Instant.ofEpochMilli(word.lastModified).formatted())
                                label(Instant.ofEpochMilli(word.lastRateModified).formatted())
                                label(if (word.lastTrained > 0) Instant.ofEpochMilli(word.lastTrained).formatted() else "-")
                            }
                        }
                    }
                }
                label(block.translations.joinToString(", ")).style { fontSize = 12.px }
                label(block.transcriptions.joinToString(", ") { "[$it]" }).style { fontSize = 12.px }
            }

            hbox(alignment = Pos.CENTER_RIGHT) {
                hgrow = Priority.ALWAYS
                usePrefSize = true
                vbox(spacing = 5, alignment = Pos.CENTER) {
                    worderStatusLabel(block.statusProperty).style { fontSize = 16.px }
                    add(resolutionUI)
                }
            }
        }

        separator()

        add(find<ChoosableValuesFragment>("choosableValues" to choosableDefinitions))

        separator()

        add(find<ChoosableValuesFragment>("choosableValues" to choosableExamples))
    }


    private inner class ClHandler {
        private var areDefinitionsSet = false
        private var areExamplesSet = false


        init {
            clFragment.apply {
                label.text = "DEF"
                textField.setOnKeyPressed {
                    if (it.code == KeyCode.ENTER) {
                        clHandler.send(clFragment.textField.text ?: "")
                        clFragment.textField.text = null
                    }
                }
                helpButton.setOnAction {
                    find<WordBlockHelp>().openModal()
                }
            }
        }


        fun send(input: String) {
            if (input.startsWith("--")) {
                when (input) {
                    "--remove" -> resolutionUI.value = WordBlock.WordBlockResolution.REMOVED
                    "--learn" -> resolutionUI.value = WordBlock.WordBlockResolution.LEARNED
                    "--skip" -> resolutionUI.value = WordBlock.WordBlockResolution.SKIPPED
                    "--commit" -> find<UpdateTabView>().commitLast()
                    "--help" -> clFragment.helpButton.onAction.handle(null)
                }
                return
            }

            if (!areDefinitionsSet) {
                when {
                    input.isEmpty() -> {
                        areDefinitionsSet = chosenDefinitions.size > 0
                    }

                    input.first().isDigit() -> {
                        val chosenIndexes = input.split(' ')
                                .map { it.toInt() - 1 }

                        if (chosenIndexes.size + chosenDefinitions.size > 2) {
                            warning("You can't choose more than 2 definitions! (Primary and secondary ones)")
                            return
                        }

                        if (chosenIndexes.any { it > choosableDefinitions.values.lastIndex }) {
                            warning("Please check your selected indexes! You can choose from 1 to ${choosableDefinitions.values.size}!")
                            return
                        }

                        chosenIndexes.forEach { choosableDefinitions.choosables[it].isChosen = true }
                        areDefinitionsSet = chosenDefinitions.size == 2
                    }

                    else -> {
                        if (chosenDefinitions.size + 1 > 2) {
                            warning("You can't choose more than 2 definitions! (Primary and secondary ones)")
                            return
                        }

                        val newChoosable = choosableDefinitions.proposeNewValue(input)?.let {
                            it.isChosen = true
                        }

                        if (newChoosable == null)
                            warning("You can't add duplicated value!")

                        areDefinitionsSet = chosenDefinitions.size == 2
                    }
                }

                if (areDefinitionsSet) {
                    clFragment.label.text = "EXP"
                }

                return
            }

            if (!areExamplesSet) {
                when {
                    input.isEmpty() -> {
                        resolutionUI.value = WordBlock.WordBlockResolution.UPDATED
                    }

                    input.first().isDigit() -> {
                        val chosenIndexes = input.split(' ')
                                .map { it.toInt() - 1 }

                        if (chosenIndexes.any { it > choosableExamples.values.lastIndex }) {
                            warning("Please check your selected indexes! You can choose from 1 to ${choosableExamples.values.size}!")
                            return
                        }

                        chosenIndexes.forEach { choosableExamples.choosables[it].isChosen = true }
                    }

                    else -> {
                        val newChoosable = choosableExamples.proposeNewValue(input)?.let {
                            it.isChosen = true
                        }

                        if (newChoosable == null)
                            warning("You can't add duplicated value!")
                    }
                }
            }
        }
    }

    class WordBlockHelp : View() {
        override val root: WebView = webview {
            engine.load(resources["/WordBlock-help.html"])

            title = engine.location
            isContextMenuEnabled = false
            prefWidth = 1000.0

            engine.titleProperty().onChangeOnce {
                title = it!!
            }
        }
    }
}
