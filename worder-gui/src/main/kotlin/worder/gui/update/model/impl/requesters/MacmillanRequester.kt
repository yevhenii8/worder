/**
 * Stamp was generated by <generateFileStamps.sh>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <MacmillanRequester.kt>
 * Created: <02/07/2020, 11:27:00 PM>
 * Modified: <04/08/2020, 07:11:08 PM>
 * Version: <20>
 */

package worder.gui.update.model.impl.requesters

import worder.gui.core.model.BareWord
import worder.gui.update.model.DefinitionRequester
import worder.gui.update.model.ExampleRequester
import worder.gui.update.model.Requester
import worder.gui.update.model.TranscriptionRequester
import worder.gui.update.model.impl.WebsiteRequesterDecorator
import worder.gui.update.model.impl.WebsiteRequesterDecorator.Companion.sendGetRequest

class MacmillanRequester private constructor() : DefinitionRequester, ExampleRequester, TranscriptionRequester {
    companion object {
        private const val SITE_URL = "https://www.macmillandictionary.com/dictionary/british/"

        private val TRANSCRIPTION_PATTERN = Regex("(?<=<span class=\"PRON\">).*?(?=</div>)")
        private val TRANSCRIPTION_FILTER = Regex("( /)|(/)")
        private val DEFINITION_PATTERN = Regex("(?<=<span class=\"DEFINITION\">).*?(?=</span></?div)")
        private val EXAMPLE_PATTERN = Regex("((?<=<p class=\"EXAMPLE\").*?(?=</p>))|((?<=<div class=\"openEx\").*?(?=</div>))")
        private val COMMON_FILTER = Regex("(<.*?>)|(resource=\"dict_british\">)")

        val instance: Requester by lazy {
            object : WebsiteRequesterDecorator(MacmillanRequester()), DefinitionRequester, ExampleRequester, TranscriptionRequester {}
        }
    }


    override lateinit var definitions: List<String>
        private set
    override lateinit var examples: List<String>
        private set
    override lateinit var transcriptions: List<String>
        private set


    override suspend fun requestWord(word: BareWord) {
        val body = sendGetRequest(SITE_URL + word.name.replace(' ', '-'))
                .plus(sendGetRequest("$SITE_URL${word.name.replace(' ', '-')}_1"))

        definitions = DEFINITION_PATTERN.findAll(body)
                .map { COMMON_FILTER.replace(it.value, "").trim() }
                .toList()

        examples = EXAMPLE_PATTERN.findAll(body)
                .map { COMMON_FILTER.replace(it.value, "").trim() }
                .toList()

        transcriptions = TRANSCRIPTION_PATTERN.findAll(body)
                .map {
                    var str = it.value
                    str = COMMON_FILTER.replace(str, "").trim()
                    str = TRANSCRIPTION_FILTER.replace(str, "")
                    "[$str]"
                }
                .toList()
    }
}
