/**
 * Stamp was generated by <generateFileStamps.sh>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <DatabaseController.kt>
 * Created: <02/07/2020, 11:27:00 PM>
 * Modified: <21/11/2020, 08:54:11 PM>
 * Version: <30>
 */

package worder.gui.database

import kotlinx.coroutines.Job
import kotlinx.coroutines.MainScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import tornadofx.Controller
import worder.gui.core.formatGrouped
import worder.gui.core.model.BaseObservableStats
import worder.gui.database.model.WorderDB
import worder.gui.database.model.impl.SQLiteFile
import java.io.File

class DatabaseController : Controller(), DatabaseEventProducer {
    val controllerStats: BaseObservableStats = BaseObservableStats(
            origin = "Database Controller",
            titlesOrderPriority = listOf(
                    "Data source",
                    "Database size",
                    "Session duration"
            )
    )

    private val listeners = mutableListOf<DatabaseEventListener>()
    private var timerValue: String by controllerStats.bindThroughValue(initValue = "00:00:00", title = "Session duration")
    private var dbFileSize: String by controllerStats.bindThroughValue(initValue = "0 KiB", title = "Database size")
    private var currentDB: File? = null
    private var secTicker: Job? = null

    var db: WorderDB? by controllerStats.bindThroughValue(initValue = null, title = "Data source")
        private set


    /*
    Public Controller's API
     */

    fun connectToSqlLiteFile(file: File) {
        currentDB = file
        dbFileSize = "${(currentDB!!.length() / 1024).formatGrouped()} KiB"
        connect(SQLiteFile.createInstance(file))
    }

    fun disconnect() {
        if (db != null) {
            db!!.close()
            db = null
            secTicker?.cancel()
            currentDB = null
            listeners.forEach { it.onDatabaseDisconnection() }
        }
    }

    override fun subscribe(eventListener: DatabaseEventListener) {
        listeners.add(eventListener)
    }

    override fun subscribeAndRaise(eventListener: DatabaseEventListener) {
        subscribe(eventListener)

        if (db != null)
            eventListener.onDatabaseConnection(db!!)
        else
            eventListener.onDatabaseDisconnection()
    }


    /*
    Inner Private Methods
     */

    private fun connect(otherDB: WorderDB) {
        if (db != null)
            disconnect()

        db = otherDB
        secTicker = MainScope().launch { tickerJob() }
        listeners.forEach { it.onDatabaseConnection(db!!) }
    }

    private suspend fun tickerJob() {
        var seconds = 0
        while (true) {
            delay(1000L)
            seconds++

            val h = "${seconds / 3600}".padStart(2, '0')
            val m = "${seconds % 3600 / 60}".padStart(2, '0')
            val s = "${seconds % 60}".padStart(2, '0')

            timerValue = "$h:$m:$s"
            dbFileSize = "${(currentDB!!.length() / 1024).formatGrouped()} KiB"
        }
    }
}
