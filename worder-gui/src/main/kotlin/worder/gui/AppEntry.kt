/**
 * Stamp was generated by <generateFileStamps.sh>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <AppEntry.kt>
 * Created: <02/07/2020, 11:27:00 PM>
 * Modified: <21/11/2020, 11:35:36 PM>
 * Version: <149>
 */

package worder.gui

import javafx.stage.Stage
import tornadofx.App
import tornadofx.FX
import tornadofx.find
import worder.gui.core.MainView
import worder.gui.core.styles.WorderCustomStyles
import worder.gui.core.styles.WorderDefaultStyles
import worder.gui.database.DatabaseController
import worder.gui.insert.InsertTabView
import java.io.File
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.StandardCopyOption
import kotlin.system.exitProcess

class AppEntry : App(MainView::class, WorderDefaultStyles::class, WorderCustomStyles::class) {
    companion object {
        private val databaseController: DatabaseController = find()
        private val obtainDemoDB: (Path) -> Path = { it.resolve("demo-db-backup.bck") }
        private val obtainDemoFiles: (Path) -> Collection<File> = {
            listOf(
                    it.resolve("demo-words0.txt").toFile(),
                    it.resolve("demo-words1.txt").toFile(),
                    it.resolve("demo-words2.txt").toFile(),
                    it.resolve("demo-words3.txt").toFile(),
                    it.resolve("demo-words4.txt").toFile(),
                    it.resolve("demo-words5.txt").toFile()
            )
        }

        val worderVersion: String = Companion::class.java.getResource("/version").readText()
        val obtainDemoTmpDB: (Path) -> Path = { it.resolve("demo-db-backup-tmp.bck") }
        val isConnectedToDemo: (Path) -> Boolean = { databaseController.db?.toString() == obtainDemoTmpDB(it).toString() }
        val mainView: MainView = find()


        private fun withDemoDB(pathToDemo: Path = Path.of("demo"), block: (demoPath: Path) -> Unit) {
            val demoDB = obtainDemoDB(pathToDemo)
            val demoTmpDB = obtainDemoTmpDB(pathToDemo)

            if (!isConnectedToDemo(pathToDemo)) {
                require(Files.exists(demoDB)) {
                    "There's no demo database provided! Please check: $demoDB"
                }

                Files.copy(demoDB, demoTmpDB, StandardCopyOption.REPLACE_EXISTING)
                databaseController.connectToSqlLiteFile(demoTmpDB.toFile())
            }

            block.invoke(pathToDemo)
        }

        private fun runDevInsert() = withDemoDB {
            mainView.switchToInsertTab()
            find<InsertTabView>().generateInsertBatch(obtainDemoFiles(it))
        }

        private fun runDevInsertHard() = withDemoDB {
            val demoFiles = obtainDemoFiles(it)
            val devInsertFilesMany = mutableListOf<File>().apply {
                repeat(10) {
                    addAll(demoFiles)
                }
            }

            mainView.switchToInsertTab()
            find<InsertTabView>().generateInsertBatch(devInsertFilesMany)
        }

        fun printEnvInfo() {
            println("Used JRE: ${Runtime.version()}")
            println("Used KotlinC: ${KotlinVersion.CURRENT}")

            println("worder classloader: ${this::class.java.classLoader}")
            println("worder classloader name: ${this::class.java.classLoader.name}")
            println("worder classloader parent: ${this::class.java.classLoader.parent}")
            println("worder classloader parent name: ${this::class.java.classLoader.parent.name}")

            exitProcess(0)
        }

        fun printHelp() {
            val nameMaxLen = WorderArgument.values().map { it.designation.length }.max()!!
            val descMaxLen = WorderArgument.values().map { it.description.length }.max()!!

            println()
            println("-".repeat(7 + nameMaxLen + descMaxLen))
            println("Be aware, all of 'dev_' arguments are for dev purposes. Don't use them.")
            println("-".repeat(7 + nameMaxLen + descMaxLen))
            println()

            WorderArgument.values().forEach {
                println("    " + it.name + " ".repeat(nameMaxLen - it.name.length + 3) + it.description)
            }

            exitProcess(0)
        }

        fun runDemo() {
            val pathToDemo = Path.of(WorderArgument.DEMO.value!!)
            withDemoDB(pathToDemo) {
                find<InsertTabView>().generateInsertBatch(obtainDemoFiles(it))
            }
        }
    }


    override fun start(stage: Stage) {
        stage.apply {
            icons += resources.image("/icons/worder-icon_256x256.png")
            isMaximized = true
        }

        super.start(stage)
        processArguments()
    }

    override fun stop() {
        databaseController.disconnect()
        super.stop()
    }


    private fun processArguments() {
        val mappedArgs = FX.application.parameters.raw
                .associateWith { str ->
                    val argName = str.substringBefore('=')
                    val argValue = str.substringAfter('=').removePrefix("\"").removeSuffix("\"")
                    val worderArgument = WorderArgument.values()
                            .find { it.designation == argName }

                    if (argValue != str)
                        worderArgument?.let { it.value = argValue }

                    worderArgument
                }

        require(mappedArgs.all { it.value != null }) {
            "Unexpected argument(s): ${mappedArgs.filterValues { it == null }.keys}"
        }

        mappedArgs.apply {
            if (size > 0)
                mainView.title += " (${keys.joinToString(" ")})"
            forEach { it.value?.action?.invoke() }
        }
    }


    enum class WorderArgument(
            val designation: String,
            val description: String,
            val action: () -> Unit,
            var value: String? = null
    ) {
        DEMO(
                "--demo",
                "Runs application in a demonstration mode. Requires path to demo directory to be specified.",
                AppEntry.Companion::runDemo
        ),
        HELP(
                "--help",
                "Prints all possible arguments and exits.",
                AppEntry.Companion::printHelp
        ),
        PRINT_ENV_INFO(
                "--print-env-info",
                "Prints environment info and exits.",
                AppEntry.Companion::printEnvInfo
        ),
        DEV_DEMO(
                "--dev-demo",
                "Automatically connects to the demo-db.",
                { withDemoDB { } }
        ),
        DEV_INSERT(
                "--dev-insert",
                "Development stage for the Insert Tab.",
                AppEntry.Companion::runDevInsert
        ),
        DEV_INSERT_HARD(
                "--dev-insert-hard",
                "Development stage for the Insert Tab with hard load.",
                AppEntry.Companion::runDevInsertHard
        ),
        DEV_UPDATE(
                "--dev-update",
                "Development stage for the Update Tab.",
                { withDemoDB { mainView.switchToUpdateTab() } }
        );
    }
}
