/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <LingvoRequesterTest.kt>
 * Created: <03/08/2020, 06:49:09 PM>
 * Modified: <03/08/2020, 08:09:37 PM>
 * Version: <5>
 */

package worder.update.model.impl.requesters

import io.kotest.core.spec.style.ShouldSpec
import kotlinx.coroutines.runBlocking
import worder.gui.core.model.BareWord
import worder.gui.update.model.impl.requesters.LingvoRequester
import worder.gui.update.model.TranscriptionRequester
import worder.gui.update.model.TranslationRequester

@Suppress("BlockingMethodInNonBlockingContext")
class LingvoRequesterTest : ShouldSpec({
    val requester = LingvoRequester.instance


    should("request the compound word = immense relief") {
        runBlocking {
            requester.requestWord(BareWord("immense relief"))
        }
    }

    should("print all the translations of a compound word = immense relief") {
        (requester as TranslationRequester).translations.forEach { println(it) }
    }

    should("print all the transcriptions of a compound word = immense relief") {
        (requester as TranscriptionRequester).transcriptions.forEach { println(it) }
    }

    should("request the compound word2 = to play for time") {
        runBlocking {
            requester.requestWord(BareWord("to play for time"))
        }
    }

    should("print all the translations of a compound word2 = to play for time") {
        (requester as TranslationRequester).translations.forEach { println(it) }
    }

    should("print all the transcriptions of a compound word2 = to play for time") {
        (requester as TranscriptionRequester).transcriptions.forEach { println(it) }
    }

    should("request the single word = immense") {
        runBlocking {
            requester.requestWord(BareWord("immense"))
        }
    }

    should("print all the translations of a single word = immense") {
        (requester as TranslationRequester).translations.forEach { println(it) }
    }

    should("print all the transcriptions of a single word = immense") {
        (requester as TranscriptionRequester).transcriptions.forEach { println(it) }
    }
})
