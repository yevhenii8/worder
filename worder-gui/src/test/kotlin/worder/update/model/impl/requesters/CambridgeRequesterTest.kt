/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <CambridgeRequesterTest.kt>
 * Created: <03/08/2020, 06:23:52 PM>
 * Modified: <03/08/2020, 08:07:28 PM>
 * Version: <4>
 */

package worder.update.model.impl.requesters

import io.kotest.core.spec.style.ShouldSpec
import kotlinx.coroutines.runBlocking
import worder.gui.core.model.BareWord
import worder.gui.update.model.impl.requesters.CambridgeRequester
import worder.gui.update.model.DefinitionRequester
import worder.gui.update.model.ExampleRequester

@Suppress("BlockingMethodInNonBlockingContext")
class CambridgeRequesterTest : ShouldSpec({
    val requester = CambridgeRequester.instance


    /**
     * FIRST BLOCK = bank credit
     */

    should("request the compound word") {
        runBlocking {
            requester.requestWord(BareWord("bank credit"))
        }
    }

    should("print all the definitions of a compound word") {
        (requester as DefinitionRequester).definitions.forEach { println(it) }
    }

    should("print all the examples of a compound word") {
        (requester as ExampleRequester).examples.forEach { println(it) }
    }


    /**
     * SECOND BLOCK = foul
     */

    should("request the single word") {
        runBlocking {
            requester.requestWord(BareWord("foul"))
        }
    }

    should("print all the definitions of a single word") {
        (requester as DefinitionRequester).definitions.forEach { println(it) }
    }

    should("print all the examples of a single word") {
        (requester as ExampleRequester).examples.forEach { println(it) }
    }
})
