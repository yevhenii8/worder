/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <MacmillanRequesterTest.kt>
 * Created: <03/08/2020, 07:01:40 PM>
 * Modified: <03/08/2020, 08:09:37 PM>
 * Version: <6>
 */

package worder.update.model.impl.requesters

import io.kotest.core.spec.style.ShouldSpec
import kotlinx.coroutines.runBlocking
import worder.gui.core.model.BareWord
import worder.gui.update.model.impl.requesters.MacmillanRequester
import worder.gui.update.model.DefinitionRequester
import worder.gui.update.model.ExampleRequester
import worder.gui.update.model.TranscriptionRequester

@Suppress("BlockingMethodInNonBlockingContext")
class MacmillanRequesterTest : ShouldSpec({
    val requester = MacmillanRequester.instance


    /**
     * FIRST BLOCK = crew neck
     */

    xshould("request the compound word1 = crew neck") {
        runBlocking {
            requester.requestWord(BareWord("crew neck"))
        }
    }

    xshould("print all the definitions of a compound word1 = crew neck") {
        (requester as DefinitionRequester).definitions.forEach { println(it) }
    }

    xshould("print all the examples of a compound word1 = crew neck") {
        (requester as ExampleRequester).examples.forEach { println(it) }
    }

    xshould("print all the transcriptions of a compound word1 = crew neck") {
        (requester as TranscriptionRequester).transcriptions.forEach { println(it) }
    }


    /**
     * SECOND BLOCK = commodity fund
     */

    xshould("request the compound word1 = commodity fund") {
        runBlocking {
            requester.requestWord(BareWord("commodity fund"))
        }
    }

    xshould("print all the definitions of a compound word1 = commodity fund") {
        (requester as DefinitionRequester).definitions.forEach { println(it) }
    }

    xshould("print all the examples of a compound word1 = commodity fund") {
        (requester as ExampleRequester).examples.forEach { println(it) }
    }

    xshould("print all the transcriptions of a compound word1 = commodity fund") {
        (requester as TranscriptionRequester).transcriptions.forEach { println(it) }
    }


    /**
     * THIRD BLOCK = crew
     */

    should("request the single word = crew") {
        runBlocking {
            requester.requestWord(BareWord("crew"))
        }
    }

    should("print all the definitions of a single word1 = crew") {
        (requester as DefinitionRequester).definitions.forEach { println(it) }
    }

    should("print all the examples of a single word1 = crew") {
        (requester as ExampleRequester).examples.forEach { println(it) }
    }

    should("print all the transcriptions of a single word1 = crew") {
        (requester as TranscriptionRequester).transcriptions.forEach { println(it) }
    }
})
