/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <WordsPipelineFragment.kt>
 * Created: <20/07/2020, 06:26:55 PM>
 * Modified: <30/07/2020, 09:35:17 PM>
 * Version: <221>
 */

package worder.update.ui

import javafx.geometry.Orientation
import javafx.geometry.Pos
import javafx.scene.Parent
import javafx.scene.control.Label
import javafx.scene.control.ScrollBar
import javafx.scene.control.ScrollPane
import javafx.scene.layout.VBox
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import tornadofx.Fragment
import tornadofx.bindChildren
import tornadofx.borderpane
import tornadofx.button
import tornadofx.fitToParentSize
import tornadofx.hbox
import tornadofx.imageview
import tornadofx.label
import tornadofx.onChange
import tornadofx.paddingHorizontal
import tornadofx.paddingVertical
import tornadofx.progressindicator
import tornadofx.px
import tornadofx.scrollpane
import tornadofx.style
import tornadofx.vbox
import tornadofx.visibleWhen
import worder.core.observableStats
import worder.database.model.WorderUpdateDB
import worder.update.model.WordsPipeline
import worder.update.model.impl.DefaultWordsPipeline
import worder.update.model.impl.requesters.FakeRequester

class WordsPipelineFragment : Fragment() {
    private val database: WorderUpdateDB by param()
    private val commandLineUI: CommandLineFragment = find()
    private val wordsPipeline: WordsPipeline = DefaultWordsPipeline.createInstance(
            database = database,
//            usedRequesters = Requester.defaultRequesters,
//            usedRequesters = listOf(FakeRequester()),
            usedRequesters = listOf(FakeRequester.instance),
            selectOrder = WorderUpdateDB.SelectOrder.RANDOM
    )


    override val root: Parent = borderpane {
        center = vbox(spacing = 20) {
            hbox {
                fitToParentSize()

                val scrollBarUI: ScrollBar = ScrollBar().apply {
                    orientation = Orientation.VERTICAL
                    this@hbox.add(this)
                }

                scrollpane {
                    fitToParentSize()

                    vbarPolicy = ScrollPane.ScrollBarPolicy.NEVER
                    hbarPolicy = ScrollPane.ScrollBarPolicy.NEVER
                    isFitToWidth = true
                    paddingHorizontal = 20
                    paddingVertical = 10


                    content = vbox(spacing = 30, alignment = Pos.BOTTOM_CENTER) {
                        minHeightProperty().bind(this@scrollpane.heightProperty())
                        heightProperty().onChange {
                            vvalue = 1.0
                        }

                        bindChildren(wordsPipeline.pipelineProperty) {
                            find<WordBlockFragment>("block" to it, "clFragment" to commandLineUI).root
                        }

                        wordsPipeline.isEmptyProperty.onChange {
                            if (it == true) {
                                if (children.isNotEmpty()) {
                                    vbox(spacing = 5, alignment = Pos.CENTER) {
                                        label("ALL THE WORDS HAVE BEEN UPDATED :)").style { fontSize = 18.px }
                                        button("Commit the last block!") {
                                            setOnAction {
                                                CoroutineScope(Dispatchers.Default).launch {
                                                    wordsPipeline.pipeline.last().commit()
                                                }

                                                isDisable = true
                                                commandLineUI.root.isDisable = true
                                            }
                                        }
                                    }
                                } else {
                                    content = find<EmptyPipeline>().root
                                }
                            }
                        }
                    }

                    scrollBarUI.apply {
                        minProperty().bind(vminProperty())
                        maxProperty().bind(vmaxProperty())
                        visibleAmountProperty().bind(heightProperty().divide((content as VBox).heightProperty()))
                        vvalueProperty().bindBidirectional(valueProperty())
                    }
                }
            }
            add(commandLineUI)
        }

        right = vbox(spacing = 20, alignment = Pos.TOP_CENTER) {
            paddingHorizontal = 125
            wordsPipeline.usedRequesters.forEach {
                observableStats(observableStats = it.observableStats, hideNullable = true) {
                    (children[0] as Label).graphic = progressindicator {
                        setPrefSize(20.0, 20.0)
                        visibleWhen(it.isBusyProperty)
                    }
                }
            }
        }
    }


    class EmptyPipeline : Fragment() {
        override val root: Parent = vbox {
            alignment = Pos.CENTER
            spacing = 15.0
            imageview("/images/empty-box.png")
            label("NO WORDS TO UPDATE :(").style { fontSize = 18.px }
        }
    }
}
