/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <WordsPipelineFragment.kt>
 * Created: <20/07/2020, 06:26:55 PM>
 * Modified: <22/07/2020, 06:41:15 PM>
 * Version: <43>
 */

package worder.update.ui

import javafx.geometry.Pos
import javafx.scene.Parent
import javafx.scene.control.Label
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import tornadofx.Fragment
import tornadofx.borderpane
import tornadofx.button
import tornadofx.label
import tornadofx.progressindicator
import tornadofx.textfield
import tornadofx.vbox
import tornadofx.visibleWhen
import worder.core.model.Word
import worder.core.observableStats
import worder.database.model.WorderUpdateDB
import worder.update.model.Requester
import worder.update.model.impl.requesters.CambridgeRequester
import worder.update.model.impl.requesters.LingvoRequester
import worder.update.model.impl.requesters.MacmillanRequester
import worder.update.model.impl.requesters.WooordHuntRequester

class WordsPipelineFragment : Fragment() {
    private val db: WorderUpdateDB by param()


    override val root: Parent = borderpane {
        center = vbox(spacing = 25) {
            val textField = textfield()

            button("request cambridge") {
                setOnAction {
                    CoroutineScope(Dispatchers.Default).launch {
                        CambridgeRequester.instance.requestWord(Word(textField.text, null))
                    }
                }
            }

            button("request lingvo") {
                setOnAction {
                    CoroutineScope(Dispatchers.Default).launch {
                        LingvoRequester.instance.requestWord(Word(textField.text, null))
                    }
                }
            }

            button("request macmillian") {
                setOnAction {
                    CoroutineScope(Dispatchers.Default).launch {
                        MacmillanRequester.instance.requestWord(Word(textField.text, null))
                    }
                }
            }

            button("request woooordhunt") {
                setOnAction {
                    CoroutineScope(Dispatchers.Default).launch {
                        WooordHuntRequester.instance.requestWord(Word(textField.text, null))
                    }
                }
            }
        }

        right = vbox(spacing = 20, alignment = Pos.TOP_CENTER) {
            label("Requesters")

            Requester.defaultRequesters.forEach {
                observableStats(observableStats = it.observableStats, hideNullable = true) {
                    (children[0] as Label).graphic = progressindicator {
                        setPrefSize(20.0, 20.0)
                        visibleWhen(it.isBusyProperty)
                    }
                }
            }
        }
    }
}
