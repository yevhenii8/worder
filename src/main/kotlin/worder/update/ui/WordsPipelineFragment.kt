/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <WordsPipelineFragment.kt>
 * Created: <20/07/2020, 06:26:55 PM>
 * Modified: <26/07/2020, 10:27:52 PM>
 * Version: <163>
 */

package worder.update.ui

import javafx.geometry.Orientation
import javafx.geometry.Pos
import javafx.scene.Parent
import javafx.scene.control.Label
import javafx.scene.control.ScrollBar
import javafx.scene.control.ScrollPane
import javafx.scene.control.TextField
import javafx.scene.layout.VBox
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import tornadofx.Fragment
import tornadofx.bindChildren
import tornadofx.borderpane
import tornadofx.button
import tornadofx.fitToParentSize
import tornadofx.hbox
import tornadofx.imageview
import tornadofx.label
import tornadofx.onChange
import tornadofx.paddingAll
import tornadofx.paddingHorizontal
import tornadofx.progressindicator
import tornadofx.px
import tornadofx.scrollpane
import tornadofx.style
import tornadofx.textfield
import tornadofx.vbox
import tornadofx.visibleWhen
import worder.core.observableStats
import worder.database.model.WorderUpdateDB
import worder.update.model.WordsPipeline
import worder.update.model.impl.DefaultWordsPipeline
import worder.update.model.impl.requesters.FakeRequester

class WordsPipelineFragment : Fragment() {
    private val database: WorderUpdateDB by param()
    private val wordsPipeline: WordsPipeline = DefaultWordsPipeline.createInstance(
            database = database,
//            usedRequesters = Requester.defaultRequesters,
//            usedRequesters = listOf(FakeRequester()),
            usedRequesters = listOf(FakeRequester.instance),
            selectOrder = WorderUpdateDB.SelectOrder.RANDOM
    )
    private val scrollBarUI: ScrollBar = ScrollBar().apply {
        orientation = Orientation.VERTICAL
    }
    private val commandLineUI: TextField = textfield {
        promptText = "Command Line Interface"
        minHeight = 50.0

        style {
            fontSize = 18.px
        }
    }


    override val root: Parent = borderpane {
        center = vbox(spacing = 20) {
            hbox {
                fitToParentSize()

                add(scrollBarUI)
                scrollpane {
                    fitToParentSize()

                    vbarPolicy = ScrollPane.ScrollBarPolicy.NEVER
                    hbarPolicy = ScrollPane.ScrollBarPolicy.NEVER
                    content = vbox(spacing = 30, alignment = Pos.BOTTOM_CENTER) {
                        isFitToWidth = true
                        isFitToHeight = true
                        paddingAll = 15

                        bindChildren(wordsPipeline.pipelineProperty) {
                            find<WordBlockFragment>("block" to it).root
                        }

                        heightProperty().onChange {
                            vvalue = 1.0
                        }

                        wordsPipeline.isEmptyProperty.onChange {
                            if (it == true)
                                if (children.isNotEmpty()) {
                                    vbox(spacing = 5, alignment = Pos.CENTER) {
                                        label("ALL THE WORDS HAVE BEEN UPDATED :)").style { fontSize = 18.px }
                                        button("Commit the last block!") {
                                            setOnAction {
                                                CoroutineScope(Dispatchers.Default).launch {
                                                    wordsPipeline.pipeline.last().commit()
                                                }

                                                isDisable = true
                                                commandLineUI.isDisable = true
                                            }
                                        }
                                    }
                                } else
                                    content = find<EmptyPipeline>().root
                        }
                    }

                    scrollBarUI.apply {
                        minProperty().bind(vminProperty())
                        maxProperty().bind(vmaxProperty())
                        visibleAmountProperty().bind(heightProperty().divide((content as VBox).heightProperty()))
                        vvalueProperty().bindBidirectional(valueProperty())
                    }
                }
            }
            add(commandLineUI)
        }

        right = vbox(spacing = 20, alignment = Pos.TOP_CENTER) {
            paddingHorizontal = 125
            label("Requesters")

            wordsPipeline.usedRequesters.forEach {
                observableStats(observableStats = it.observableStats, hideNullable = true) {
                    (children[0] as Label).graphic = progressindicator {
                        setPrefSize(20.0, 20.0)
                        visibleWhen(it.isBusyProperty)
                    }
                }
            }
        }
    }


    class EmptyPipeline : Fragment() {
        override val root: Parent = vbox {
            alignment = Pos.CENTER
            spacing = 15.0
            imageview("/images/empty-box.png")
            label("NO WORDS TO UPDATE :(").style { fontSize = 18.px }
        }
    }
}
