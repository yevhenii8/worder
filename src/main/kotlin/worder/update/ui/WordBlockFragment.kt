/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <WordBlockFragment.kt>
 * Created: <24/07/2020, 07:45:55 PM>
 * Modified: <25/07/2020, 08:57:24 PM>
 * Version: <108>
 */

package worder.update.ui

import javafx.beans.property.ListProperty
import javafx.beans.property.SimpleListProperty
import javafx.beans.property.SimpleObjectProperty
import javafx.collections.ObservableList
import javafx.geometry.Pos
import javafx.scene.Parent
import javafx.scene.control.ComboBox
import javafx.scene.layout.Priority
import javafx.scene.paint.Color
import tornadofx.Fragment
import tornadofx.box
import tornadofx.checkbox
import tornadofx.combobox
import tornadofx.enableWhen
import tornadofx.hbox
import tornadofx.hgrow
import tornadofx.label
import tornadofx.observableListOf
import tornadofx.onChange
import tornadofx.paddingVertical
import tornadofx.px
import tornadofx.separator
import tornadofx.style
import tornadofx.toObservable
import tornadofx.tooltip
import tornadofx.vbox
import worder.core.formatted
import worder.core.worderStatusLabel
import worder.database.model.DatabaseWord
import worder.update.model.WordBlock
import java.time.Instant

class WordBlockFragment : Fragment() {
    private val block: WordBlock by param()
    private val word: DatabaseWord = block.originalWord

    private val possibleResolutions: ObservableList<WordBlock.WordBlockResolution> = WordBlock.WordBlockResolution.values()
            .filter { it != WordBlock.WordBlockResolution.UPDATED }
            .toList()
            .toObservable()
    private val resolutionUI: ComboBox<WordBlock.WordBlockResolution> = combobox(
            property = SimpleObjectProperty(block.resolution),
            values = possibleResolutions
    ) {
        valueProperty().onChange {
            when (it) {
                WordBlock.WordBlockResolution.UPDATED -> block.update(
                        primaryDefinition = selectedDefinitions.first(),
                        secondaryDefinition = selectedDefinitions.getOrNull(1),
                        transcription = selectedTranscription,
                        examples = selectedExamples
                )
                WordBlock.WordBlockResolution.REMOVED -> block.remove()
                WordBlock.WordBlockResolution.LEARNED -> block.learn()
                WordBlock.WordBlockResolution.SKIPPED -> block.skip()
            }
        }
    }

    private var selectedTranscription: String? = block.transcriptions.firstOrNull()
    private var selectedDefinitions: ListProperty<String> = SimpleListProperty<String>(observableListOf()).apply {
        sizeProperty().onChange {
            if (it > 0) {
                if (!possibleResolutions.contains(WordBlock.WordBlockResolution.UPDATED))
                    possibleResolutions.add(WordBlock.WordBlockResolution.UPDATED)
                resolutionUI.value = WordBlock.WordBlockResolution.UPDATED
            } else {
                if (possibleResolutions.contains(WordBlock.WordBlockResolution.UPDATED))
                    possibleResolutions.remove(WordBlock.WordBlockResolution.UPDATED)
                resolutionUI.value = WordBlock.WordBlockResolution.NO_RESOLUTION
            }
        }
    }
    private var selectedExamples: MutableList<String> = mutableListOf()


    override val root: Parent = vbox(spacing = 10) {
        style {
            alignment = Pos.TOP_CENTER
            padding = box(15.px)
            borderRadius += box(15.px)
            borderColor += box(Color.GRAY)
        }

        hbox(20) {
            label(block.id) {
                style {
                    fontSize = 20.px
                    alignment = Pos.TOP_CENTER
                    padding = box(20.px)
                    borderColor += box(Color.GRAY)
                }
            }

            vbox {
                paddingVertical = 10

                label(word.name.toUpperCase()) {
                    style {
                        fontSize = 16.px
                        padding = box(0.px, 0.px, 5.px, 0.px)
                    }

                    tooltip {
                        graphic = hbox {
                            vbox(alignment = Pos.BASELINE_RIGHT) {
                                label("Rate: ")
                                label("Registered: ")
                                label("Last Modified: ")
                                label("Last Rate Modified: ")
                                label("Last Trained: ")
                            }
                            vbox(alignment = Pos.BASELINE_LEFT) {
                                label("${word.rate} %")
                                label(Instant.ofEpochMilli(word.registered).formatted())
                                label(Instant.ofEpochMilli(word.lastModified).formatted())
                                label(Instant.ofEpochMilli(word.lastRateModified).formatted())
                                label(if (word.lastTrained > 0) Instant.ofEpochMilli(word.lastTrained).formatted() else "-")
                            }
                        }
                    }
                }
                label(block.translations.joinToString(", ")).style { fontSize = 12.px }
                label(block.transcriptions.joinToString(", ") { "[$it]" }).style { fontSize = 12.px }
            }

            hbox(alignment = Pos.CENTER_RIGHT) {
                hgrow = Priority.ALWAYS
                vbox(spacing = 5, alignment = Pos.CENTER) {
                    worderStatusLabel(block.statusProperty).style { fontSize = 16.px }
                    add(resolutionUI)
                }
            }
        }

        separator()

        vbox {
            block.definitions.forEachIndexed { index, definition ->
                checkbox("${index + 1}) $definition") {
                    enableWhen(selectedDefinitions.sizeProperty().lessThan(2).or(selectedProperty()))
                    selectedProperty().onChange {
                        if (it)
                            selectedDefinitions.add(text.substringAfter(')'))
                        else
                            selectedDefinitions.remove(text.substringAfter(')'))
                    }
                }
            }
        }

        separator()

        vbox {
            block.examples.forEachIndexed { index, example ->
                checkbox("${index + 1}) $example") {
                    selectedProperty().onChange {
                        if (it)
                            selectedExamples.add(text.substringAfter(')'))
                        else
                            selectedExamples.remove(text.substringAfter(')'))
                    }
                }
            }
        }
    }
}
