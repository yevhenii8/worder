/**
 * Stamp was generated by <generateFileStamps.sh>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <InsertView.kt>
 * Created: <02/07/2020, 11:27:00 PM>
 * Modified: <20/07/2020, 06:26:55 PM>
 * Version: <456>
 */

package worder.insert

import javafx.scene.Parent
import javafx.stage.FileChooser.ExtensionFilter
import tornadofx.View
import tornadofx.stackpane
import worder.core.ui.DragAndDropFragment
import worder.database.DatabaseController
import worder.database.DatabaseEventListener
import worder.database.model.WorderDB
import worder.database.ui.NoConnectionFragment
import worder.insert.model.InsertModel
import worder.insert.ui.InsertModelFragment
import worder.tornadofx.replaceChildren
import java.io.File

class InsertView : View("Insert"), DatabaseEventListener {
    private val insertController: InsertController by inject()
    private val notConnectedFragment = find<NoConnectionFragment>()
    private val notUploadedFragment = find<DragAndDropFragment>(
            "text" to "Drag one or more plain files here to process them",
            "windowTitle" to "Inserter Files Selection",
            "extensionFilter" to ExtensionFilter("Text Files (*.txt)", "*.txt"),
            "action" to { files: List<File> -> insertController.generateInsertModel(files) },
            "allowMultiselect" to true
    )


    override val root: Parent = stackpane()


    init {
        find<DatabaseController>().subscribeAndRaise(this)
    }


    override fun onDatabaseConnection(db: WorderDB) = toNotUploadedState()

    override fun onDatabaseDisconnection() = root.replaceChildren(notConnectedFragment)


    fun toNotUploadedState() = root.replaceChildren(notUploadedFragment)

    fun toUploadedState(insertModel: InsertModel) = root.replaceChildren(find<InsertModelFragment>("model" to insertModel))
}
