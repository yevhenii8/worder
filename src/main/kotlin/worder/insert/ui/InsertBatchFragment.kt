/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <InsertBatchFragment.kt>
 * Created: <09/07/2020, 10:43:11 PM>
 * Modified: <02/08/2020, 10:36:38 PM>
 * Version: <384>
 */

package worder.insert.ui

import javafx.collections.ListChangeListener
import javafx.collections.ObservableList
import javafx.geometry.HorizontalDirection
import javafx.geometry.Pos
import javafx.scene.Parent
import javafx.scene.layout.HBox
import javafx.scene.layout.Priority
import javafx.scene.paint.Color
import javafx.util.StringConverter
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import tornadofx.Fragment
import tornadofx.addClass
import tornadofx.borderpane
import tornadofx.box
import tornadofx.button
import tornadofx.confirm
import tornadofx.hbox
import tornadofx.hgrow
import tornadofx.label
import tornadofx.observableListOf
import tornadofx.onChange
import tornadofx.paddingAll
import tornadofx.progressindicator
import tornadofx.px
import tornadofx.region
import tornadofx.separator
import tornadofx.setId
import tornadofx.style
import tornadofx.useMaxWidth
import tornadofx.usePrefSize
import tornadofx.vbox
import worder.core.formatGrouped
import worder.core.listBasedStats
import worder.core.styles.WorderCustomStyles
import worder.core.worderStatusLabel
import worder.insert.InsertController
import worder.insert.model.BatchUnit
import worder.insert.model.InsertBatch
import worder.insert.model.ObservableInsertBatchStats

class InsertBatchFragment : Fragment() {
    private val batch: InsertBatch by param()
    private val stats: ObservableInsertBatchStats = batch.observableStats
    private val uncommittedUnits: ObservableList<BatchUnit>
    private val uncommittedUnitsUI: HBox
    private val committedUnitsUI: HBox
    private val rowSpacing: Number = 100


    init {
        uncommittedUnits = batch.run {
            val res = observableListOf(actionNeededUnits + readyToCommitUnits)

            committedUnitsProperty.onChange { op: ListChangeListener.Change<out BatchUnit> ->
                if (op.next() && op.wasAdded())
                    res.removeAll(op.addedSubList)
            }

            res
        }
        uncommittedUnitsUI = find<BatchUnitsContainerFragment>(
                "units" to uncommittedUnits,
                "direction" to HorizontalDirection.LEFT
        ).root
        committedUnitsUI = find<BatchUnitsContainerFragment>(
                "units" to batch.committedUnitsProperty,
                "direction" to HorizontalDirection.RIGHT
        ).root
    }


    override val root: Parent = borderpane {
        left = hbox(alignment = Pos.CENTER) {
            add(uncommittedUnitsUI)
        }

        center = vbox(spacing = rowSpacing, alignment = Pos.CENTER) {
            style {
                padding = box(0.px, 70.px)
                fontSize = 18.px
            }
            hbox {
                addClass(WorderCustomStyles.worderBlock)
                style(append = true) { padding = box(20.px) }
                progressindicator {
                    setId(WorderCustomStyles.batchProgress)
                    stats.totalProcessedProperty.onChange {
                        progress = (it.toDouble() / stats.totalValidWords)
                    }
                    usePrefSize = true
                    progress = 0.0
                }
                region {
                    hgrow = Priority.ALWAYS
                }
                vbox(spacing = 15, alignment = Pos.CENTER) {
                    worderStatusLabel(batch.statusProperty)
                    separator()
                    label(
                            observable = batch.statusProperty,
                            converter = object : StringConverter<InsertBatch.InsertBatchStatus>() {
                                override fun toString(status: InsertBatch.InsertBatchStatus): String = status.description
                                override fun fromString(string: String?): InsertBatch.InsertBatchStatus = throw IllegalStateException()
                            }
                    ) {
                        style {
                            textFill = Color.GRAY
                            padding = box(0.px, 15.px)
                        }
                    }
                }
                region {
                    hgrow = Priority.ALWAYS
                }
            }
            hbox {
                val uploadedVbox = vbox(spacing = rowSpacing) {
                    listBasedStats(
                            blockTitle = "Uploaded Data Stats",
                            statsProperties = listOf(
                                    stats.totalWordsProperty,
                                    stats.totalValidWordsProperty,
                                    stats.totalInvalidWordsProperty
                            ),
                            commonValueMutator = { (this as Int).formatGrouped() }
                    ).addClass(WorderCustomStyles.batchStatBlock)
                    button("Reset This Batch") {
                        useMaxWidth = true
                        batch.statusProperty.onChange {
                            isDisable = it == InsertBatch.InsertBatchStatus.COMMITTING
                        }
                        setOnAction {
                            if (uncommittedUnits.isEmpty()) {
                                find<InsertController>().resetInsertBatch()
                                return@setOnAction
                            }
                            confirm("There are uncommitted units here. Are you sure you want to reset this batch?") {
                                find<InsertController>().resetInsertBatch()
                            }
                        }
                    }.style(append = true) { padding = box(15.px) }
                }
                region {
                    hgrow = Priority.ALWAYS
                }
                val processedVbox = vbox(spacing = rowSpacing) {
                    listBasedStats(
                            blockTitle = "Processed Data Stats",
                            statsProperties = listOf(
                                    stats.totalProcessedProperty,
                                    stats.insertedProperty,
                                    stats.resetProperty
                            ),
                            commonValueMutator = { (this as Int).formatGrouped() }
                    ).addClass(WorderCustomStyles.batchStatBlock)
                    button("Commit All Units") {
                        useMaxWidth = true
                        batch.statusProperty.onChange {
                            isDisable = it == InsertBatch.InsertBatchStatus.COMMITTING
                        }
                        setOnAction {
                            CoroutineScope(Dispatchers.Default).launch {
                                batch.commitAllUnits()
                            }
                        }
                    }.style(append = true) { padding = box(15.px) }
                }

                processedVbox.minWidthProperty().bind(uploadedVbox.widthProperty())
                uploadedVbox.minWidthProperty().bind(processedVbox.widthProperty())
            }
        }


        right = hbox(alignment = Pos.CENTER) {
            add(committedUnitsUI)
        }
    }
}
