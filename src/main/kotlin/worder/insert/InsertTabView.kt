/**
 * Stamp was generated by <generateFileStamps.sh>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <InsertTabView.kt>
 * Created: <02/07/2020, 11:27:00 PM>
 * Modified: <03/08/2020, 05:03:46 PM>
 * Version: <462>
 */

package worder.insert

import javafx.scene.Parent
import javafx.stage.FileChooser.ExtensionFilter
import tornadofx.View
import tornadofx.stackpane
import worder.core.ui.DragAndDropFragment
import worder.database.DatabaseController
import worder.database.DatabaseEventListener
import worder.database.model.WorderDB
import worder.database.ui.NoConnectionFragment
import worder.insert.model.impl.DefaultInsertBatch
import worder.insert.ui.InsertBatchFragment
import worder.tornadofx.replaceChildren
import java.io.File

class InsertTabView : View("Insert"), DatabaseEventListener {
    private val databaseController: DatabaseController by inject()
    private val notConnectedFragment = find<NoConnectionFragment>()
    private val notUploadedFragment: DragAndDropFragment


    override val root: Parent = stackpane()


    init {
        notUploadedFragment = find(
                "text" to "Drag one or more plain files here to process them",
                "windowTitle" to "Inserter Files Selection",
                "extensionFilter" to ExtensionFilter("Text Files (*.txt)", "*.txt"),
                "action" to { files: List<File> -> generateInsertBatch(files) },
                "allowMultiselect" to true
        )
        find<DatabaseController>().subscribeAndRaise(this)
    }


    override fun onDatabaseConnection(db: WorderDB) = root.replaceChildren(notUploadedFragment)

    override fun onDatabaseDisconnection() = root.replaceChildren(notConnectedFragment)

    fun generateInsertBatch(files: Collection<File>) {
        val insertBatch = DefaultInsertBatch.createInstance(databaseController.db!!.inserter, files)
        root.replaceChildren(find<InsertBatchFragment>("batch" to insertBatch))
    }

    fun resetInsertBatch() {
        root.replaceChildren(notUploadedFragment)
    }
}
