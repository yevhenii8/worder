/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <ConcurrentCommitTest.kt>
 * Created: <17/07/2020, 11:29:59 PM>
 * Modified: <18/07/2020, 12:39:35 AM>
 * Version: <7>
 */

package worder.insert.model

import io.kotest.core.spec.style.ShouldSpec
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import worder.database.model.implementations.SQLiteFile
import worder.insert.model.implementations.DefaultInsertModel
import java.io.File
import java.nio.file.Files
import java.nio.file.Path
import kotlin.streams.toList
import kotlin.system.measureTimeMillis

class ConcurrentCommitTest : ShouldSpec({
    @Suppress("BlockingMethodInNonBlockingContext")
    should("compare multi/single thread performance with sqlite") {
        val samplePath: Path = Path.of("stuff").resolve("sample")
        val originalSampleDB: File = samplePath.resolve("sample-db.bck").toFile()
        val sampleDB: File = samplePath.resolve("sample-db_TMP.bck").toFile()

        suspend fun concurrentCommit() {
            println("copyTo")
            originalSampleDB.copyTo(sampleDB, overwrite = true)

            println("SQLiteFile")
            val worderDb = SQLiteFile.createInstance(sampleDB)

            println("createInstance")
            val insertModel = DefaultInsertModel.createInstance(
                    worderDb.inserter,
                    Files.list(Path.of("/home/yevhenii/Other/inserter")).map { it.toFile() }.toList()
            )

            println("commitAll")
            insertModel.commitAllUnits()
        }

        repeat(3) {
            val blockingTime = measureTimeMillis {
                runBlocking {
                    concurrentCommit()
                }
            }

            println("blockingTime: $blockingTime")
        }

        println()

        repeat(3) {
            val concurrentTime = measureTimeMillis {
                val job = launch(Dispatchers.Default) {
                    concurrentCommit()
                }
                job.join()
            }

            println("concurrentTime: $concurrentTime")
        }

        sampleDB.delete()
    }
})
