//package worder
//
//import io.kotest.core.spec.style.ShouldSpec
//import java.nio.file.Path
//
//@Suppress("BlockingMethodInNonBlockingContext")
//class GradleUpdateFileStampsTest : ShouldSpec({
//    beforeSpec {
//        val testDir = Path.of("build", "tests", "GradleUpdateFileStampsTest").toFile()
//        val validStamp = """
//            /**
//             * This stamp was generated by <generateFileStamps.sh> at <Sat Jun 27 23:02:07 2020>
//             * Last time was checked by <generateFileStamps.sh> at <Sat Jun 27 23:02:07 2020>
//             *
//             * Created: <Sat Jun 27 22:51:50 2020>
//             * Modified: <Wed Jun 24 17:27:24 2020>
//             * Version: #<1>
//             */
//
//            package worder.core.model
//
//            import javafx.scene.paint.Paint
//
//            interface Status {
//                val description: String
//                val color: Paint
//            }
//
//        """.trimIndent()
//        val invalidStamp = """
//            /**
//             * My comment OOPs
//             * Last time was checked by <generateFileStamps.sh> at <Sat Jun 27 23:02:07 2020>
//             *
//             * Created: <Sat Jun 27 22:51:50 2020>
//             * Modified: <Wed Jun 24 17:27:24 2020>
//             * Version: #<1>
//             */
//
//            package worder.core.model
//
//            import javafx.scene.paint.Paint
//
//            interface Status {
//                val description: String
//                val color: Paint
//            }
//
//        """.trimIndent()
//        val withoutStamp = """
//            package worder.core.model
//
//            import javafx.scene.paint.Paint
//
//            interface Status {
//                val description: String
//                val color: Paint
//            }
//
//        """.trimIndent()
//
//        if (testDir.exists())
//            testDir.deleteRecursively()
//        testDir.mkdirs()
//
//        testDir.apply {
//            resolve("validStamp.kt").writeText(validStamp)
//            resolve("validStamp.kts").writeText(validStamp)
//            resolve("validStamp.html").writeText(validStamp)
//
//            resolve("invalidStamp.kt").writeText(invalidStamp)
//            resolve("invalidStamp.kts").writeText(invalidStamp)
//            resolve("invalidStamp.html").writeText(invalidStamp)
//
//            resolve("withoutStamp.kt").writeText(withoutStamp)
//            resolve("withoutStamp.kts").writeText(withoutStamp)
//            resolve("withoutStamp.html").writeText(withoutStamp)
//        }
//
////        updateFileStamps(testDir)
//    }
//
//
//    should("prepend a stamp to a file that doesn't contain one") {
//
//    }
//
//    should("check that every file contain a valid stamp") {
//
//    }
//
//    should("update stamp if a file was modified") {
//
//    }
//
//    should("process only .kt and .kts files") {
//
//    }
//
//    should("throw the error if a file contains a non-valid stamp") {
//
//    }
//})
