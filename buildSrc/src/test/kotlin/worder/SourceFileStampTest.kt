package worder

import io.kotest.core.spec.style.ShouldSpec
import io.kotest.matchers.collections.containNull
import io.kotest.matchers.collections.containOnlyNulls
import io.kotest.matchers.should
import io.kotest.matchers.shouldNot
import java.nio.file.Path

class SourceFileStampTest : ShouldSpec({
    val validStamp = """
            /**
             * This stamp was generated by <generateFileStamps.sh> at <Sat Jun 27 23:02:07 2020>
             * Last time was checked by <generateFileStamps.sh> at <Sat Jun 27 23:02:07 2020>
             *
             * Created: <Sat Jun 27 22:51:50 2020>
             * Modified: <Wed Jun 24 17:27:24 2020>
             * Version: #<1>
             */

            package worder.core.model

            import javafx.scene.paint.Paint

            interface Status {
                val description: String
                val color: Paint
            }

        """.trimIndent()
    val invalidStamp = """
            /**
             * My comment OOPs
             * Last time was checked by <generateFileStamps.sh> at <Sat Jun 27 23:02:07 2020>
             *
             * Created: <Sat Jun 27 22:51:50 2020>
             * Modified: <Wed Jun 24 17:27:24 2020>
             * Version: #<1>
             */

            package worder.core.model

            import javafx.scene.paint.Paint

            interface Status {
                val description: String
                val color: Paint
            }

        """.trimIndent()
    val noStamp = """
            package worder.core.model

            import javafx.scene.paint.Paint

            interface Status {
                val description: String
                val color: Paint
            }

        """.trimIndent()

    val testDir = Path.of("build", "tests", "SourceFileStampTest").toFile().also {
        if (!it.exists())
            it.mkdirs()
    }
    val validStampFiles = listOf(
            testDir.resolve("validStamp.kt").also { it.writeText(validStamp) },
            testDir.resolve("validStamp.kts").also { it.writeText(validStamp) }
    )
    val invalidStampFiles = listOf(
            testDir.resolve("invalidStamp.kt").also { it.writeText(invalidStamp) },
            testDir.resolve("invalidStamp.kts").also { it.writeText(invalidStamp) }
    )
    val noStampFiles = listOf(
            testDir.resolve("noStamp.kt").also { it.writeText(noStamp) },
            testDir.resolve("noStamp.kts").also { it.writeText(noStamp) }
    )


    should("work with valid stamp") {
        validStampFiles.map { SourceFileStamp.fromFile(it) } shouldNot containNull()
    }

    should("work with files with no stamp") {
        noStampFiles.map { SourceFileStamp.fromFile(it) } shouldNot containNull()
    }

    should("not work with invalid stamp") {
        invalidStampFiles.map { SourceFileStamp.fromFile(it) } should containOnlyNulls()
    }
})
