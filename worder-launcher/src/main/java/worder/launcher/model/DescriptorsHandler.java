/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <DescriptorsHandler.java>
 * Created: <28/10/2020, 10:50:39 PM>
 * Modified: <02/11/2020, 09:53:39 PM>
 * Version: <94>
 */

package worder.launcher.model;

import worder.commons.AppDescriptor;
import worder.launcher.App;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Objects;

public class DescriptorsHandler {
    public static boolean useCustomWorderHome = false;
    public static String worderDistribution = "https://dl.bintray.com/evgen8/generic/";
    public static String worderHome;

    private final ProgressHolder progressHolder;


    public DescriptorsHandler(ProgressHolder progressHolder) {
        progressHolder.status("Detecting Worder-GUI's home catalog...");
        if (!useCustomWorderHome)
            worderHome = detectWorderHome();

        this.progressHolder = progressHolder;
    }


    public void prepareWorderHome() {
        progressHolder.status("Obtaining local & remote descriptors...");

        var worderHomeCatalog = Path.of(worderHome);
        AppDescriptor localDescriptor;
        AppDescriptor remoteDescriptor;

        try {
            localDescriptor = AppDescriptor.fromByteArray(
                    Files.readAllBytes(
                            worderHomeCatalog.resolve(AppDescriptor.getCalculatedName())
                    )
            );
            remoteDescriptor = AppDescriptor.fromByteArray(
                    downloadFile(AppDescriptor.getCalculatedName())
            );
        } catch (IOException ioException) {
            ioException.printStackTrace();
            return;
        }

        if (localDescriptor == null && remoteDescriptor == null)
            throw new IllegalStateException("Neither local nor remote descriptor found!");

        if (localDescriptor != null && remoteDescriptor == null)
            return;

        if (localDescriptor != null && localDescriptor.getVersion() == remoteDescriptor.getVersion())
            return;

        syncWorderHome(localDescriptor, remoteDescriptor);
    }


    private void syncWorderHome(AppDescriptor localDescriptor, AppDescriptor remoteDescriptor) {

    }

    private String detectWorderHome() {
        var currentOs = System.getProperty("os.name");
        var userHomeCatalog = System.getProperty("user.home");

        if (currentOs.equals("Linux"))
            return userHomeCatalog + "/.worder-gui/";

        throw new IllegalStateException("There's no support of Worder-Launcher for your OS: " + currentOs);
    }

    private byte[] downloadFile(String path) {
        try {
            var url = new URL(worderDistribution + path);
            var inputStream = url.openStream();
            var res = inputStream.readAllBytes();
            inputStream.close();
            return res;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
}
