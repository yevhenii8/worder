/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <DescriptorsHandler.java>
 * Created: <28/10/2020, 10:50:39 PM>
 * Modified: <05/11/2020, 10:28:14 PM>
 * Version: <118>
 */

package worder.launcher.model;

import worder.commons.AppDescriptor;
import worder.launcher.ui.UiHandler;

import java.io.IOException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.LinkedList;
import java.util.Objects;

public class DescriptorsHandler {
    private static boolean useCustomWorderHome = false;
    private static final String worderDistribution = "https://dl.bintray.com/evgen8/generic/";
    private static Path localArtifactsPath;
    private static Path worderHomePath;

    private final UiHandler uiHandler;


    public DescriptorsHandler(UiHandler uiHandler) {
        this.uiHandler = uiHandler;

        uiHandler.status("Detecting Worder-GUI's home catalog ...");

        if (!useCustomWorderHome)
            setWorderHome(detectWorderHome());
    }


    public void prepareWorderHome() {
        uiHandler.status("Obtaining local & remote descriptors ...");

        String requiredDescriptorName = AppDescriptor.getCalculatedName();
        AppDescriptor localDescriptor = obtainLocalDescriptor(requiredDescriptorName);
        AppDescriptor remoteDescriptor = obtainRemoteDescriptor(requiredDescriptorName);

        if (localDescriptor == null && remoteDescriptor == null)
            uiHandler.criticalError("Neither local nor remote descriptor is accessible!");
        if (localDescriptor != null && remoteDescriptor == null)
            return;
        if (localDescriptor != null && localDescriptor.getVersion() == remoteDescriptor.getVersion())
            return;

        if (localDescriptor == null)
            //noinspection ConstantConditions
            syncWorderHome(remoteDescriptor);
        else
            syncWorderHome(localDescriptor, remoteDescriptor);
    }

    public Path getWorderHomePath() {
        return worderHomePath;
    }


    public static void setCustomWorderHome(String customWorderHome) {
        useCustomWorderHome = true;
        setWorderHome(customWorderHome);
    }

    private static void setWorderHome(String newWorderHome) {
        worderHomePath = Path.of(newWorderHome);
        localArtifactsPath = worderHomePath.resolve("artifacts");
    }


    private void syncWorderHome(AppDescriptor remoteDescriptor, AppDescriptor localDescriptor) {
        var toRemove = new LinkedList<>(localDescriptor.getAllArtifacts());
        var toDownload = new LinkedList<>(remoteDescriptor.getAllArtifacts());

        toRemove.removeAll(remoteDescriptor.getAllArtifacts());
        toDownload.removeAll(localDescriptor.getAllArtifacts());

        toRemove.forEach(artifacts -> {
            uiHandler.status("Removing " + artifacts.getName() + " ...");
            try {
                Files.delete(localArtifactsPath.resolve(artifacts.getName()));
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        });

        toDownload.forEach(artifact -> {
            uiHandler.status("Downloading " + artifact.getName() + " ...");
            try {
                Files.write(
                        localArtifactsPath.resolve(artifact.getName()),
                        Objects.requireNonNull(downloadFile("artifacts/" + artifact.getName()))
                );
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        });
    }

    private void syncWorderHome(AppDescriptor remoteDescriptor) {
        try {
            Files.createDirectories(localArtifactsPath);
            Files.write(worderHomePath.resolve(remoteDescriptor.getName()), remoteDescriptor.toByteArray());

            for (AppDescriptor.Artifact artifact : remoteDescriptor.getAllArtifacts()) {
                uiHandler.status("Downloading " + artifact.getName() + " ...");
                Files.write(
                        localArtifactsPath.resolve(artifact.getName()),
                        Objects.requireNonNull(downloadFile("artifacts/" + artifact.getName()))
                );
            }
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }

    private String detectWorderHome() {
        var currentOs = System.getProperty("os.name");
        var userHomeCatalog = System.getProperty("user.home");

        if (currentOs.equals("Linux"))
            return userHomeCatalog + "/.worder-gui/";

        throw new IllegalStateException("There's no support of Worder-Launcher for your OS: " + currentOs);
    }

    private byte[] downloadFile(String path) {
        try {
            var url = new URL(worderDistribution + path);
            var inputStream = url.openStream();
            var res = inputStream.readAllBytes();
            inputStream.close();
            return res;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    private AppDescriptor obtainLocalDescriptor(String requiredDescriptorName) {
        var requiredFile = worderHomePath.resolve(requiredDescriptorName);

        if (Files.notExists(requiredFile))
            return null;

        try {
            return AppDescriptor.fromByteArray(Files.readAllBytes(requiredFile));
        } catch (IOException ioException) {
            ioException.printStackTrace();
            return null;
        }
    }

    private AppDescriptor obtainRemoteDescriptor(String requiredDescriptorName) {
        var remoteDescriptorBytes = downloadFile(requiredDescriptorName);

        if (remoteDescriptorBytes == null)
            return null;

        return AppDescriptor.fromByteArray(remoteDescriptorBytes);
    }
}
