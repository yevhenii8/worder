/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <App.java>
 * Created: <04/08/2020, 07:03:59 PM>
 * Modified: <08/11/2020, 06:45:47 PM>
 * Version: <334>
 */

package worder.launcher;

import worder.commons.IOExchanger;
import worder.commons.impl.BintrayExchanger;
import worder.commons.impl.LocalExchanger;
import worder.launcher.model.DescriptorsHandler;
import worder.launcher.ui.UiHandler;
import worder.launcher.ui.impl.swing.SwingUI;

import java.io.IOException;
import java.nio.file.Path;
import java.util.Arrays;

public class App {
    private static IOExchanger worderDistribution;
    private static IOExchanger worderHome;


    public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
        processArguments(args);
        initDefaults();

        UiHandler uiHandler = new SwingUI();
        uiHandler.show();

        DescriptorsHandler descriptorsHandler = new DescriptorsHandler(uiHandler, worderDistribution, worderHome);
        descriptorsHandler.prepareWorderHome();
//
//        WorderRunner worderRunner = new WorderRunner(uiHandler, descriptorsHandler.getWorderHomePath());
//        worderRunner.runWorder();

        uiHandler.dispose();
    }


    private static void initDefaults() {
        if (worderDistribution == null)
            worderDistribution = new BintrayExchanger("evgen8", "generic");
        if (worderHome == null)
            worderHome = new LocalExchanger(Path.of(detectWorderHome()));
    }

    private static void processArguments(String[] args) {
        for (String argument : args) {
            var index = argument.indexOf("=");
            var argumentName = index > 0 ? argument.substring(0, index) : argument;
            var launcherArgument = Arrays.stream(LauncherArgument.values())
                    .filter(it -> it.name.equals(argumentName))
                    .findFirst()
                    .orElseThrow();

            launcherArgument.value = argument.substring(index + 1);
            launcherArgument.action.run();
        }
    }

    private static void setCustomWorderHome() {
        worderHome = new LocalExchanger(Path.of(LauncherArgument.WORDER_HOME.value));
    }

    private static void setCustomWorderDistribution() {
        worderDistribution = new LocalExchanger(Path.of(LauncherArgument.WORDER_DISTRIBUTION.value));
    }

    private static void printHelpAndExit() {
        var maxLength = Arrays.stream(LauncherArgument.values())
                .mapToInt(argument -> argument.name.length())
                .max()
                .orElseThrow();

        for (LauncherArgument argument : LauncherArgument.values())
            System.out.println(argument.name + " ".repeat(maxLength - argument.name.length() + 3) + argument.description);

        System.exit(0);
    }

    private static String detectWorderHome() {
        var currentOs = System.getProperty("os.name");
        var userHomeCatalog = System.getProperty("user.home");

        if (currentOs.equals("Linux"))
            return userHomeCatalog + "/.worder-gui/";

        throw new IllegalStateException("There's no support of Worder-Launcher for your OS: " + currentOs);
    }


    enum LauncherArgument {
        HELP(
                "--help",
                "Prints all possible arguments and exits.",
                App::printHelpAndExit
        ),
        WORDER_HOME(
                "--worder-home",
                "Sets specified path as a Worder Home Catalog.",
                App::setCustomWorderHome
        ),
        WORDER_DISTRIBUTION(
                "--worder-distribution",
                "Sets specified path as a Worder Distribution",
                App::setCustomWorderDistribution
        );


        private final String name;
        private final String description;
        private final Runnable action;
        private String value;


        LauncherArgument(String name, String description, Runnable action) {
            this.name = name;
            this.description = description;
            this.action = action;
        }
    }
}
