/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <App.java>
 * Created: <04/08/2020, 07:03:59 PM>
 * Modified: <02/11/2020, 09:53:39 PM>
 * Version: <264>
 */

package worder.launcher;

import worder.launcher.model.DescriptorsHandler;
import worder.launcher.ui.LauncherUI;
import worder.launcher.model.Action;

import javax.swing.*;
import java.lang.reflect.InvocationTargetException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Objects;

public class App {
    public static void main(String[] args) {
        processArguments(args);

        LauncherUI launcherUi = new LauncherUI();
        launcherUi.show();

        DescriptorsHandler descriptorsHandler = new DescriptorsHandler(launcherUi);
        descriptorsHandler.prepareWorderHome();

        runWorder(Path.of("/home/yevhenii/WorderDeployTest/"), launcherUi);
    }

    private static void runWorder(Path worderHomeCatalog, LauncherUI launcherUi) {
        URL[] urls = Arrays.stream(Objects.requireNonNull(worderHomeCatalog.resolve("artifacts").toFile().listFiles()))
                .map(file -> {
                    try {
                        return file.toURI().toURL();
                    } catch (MalformedURLException e) {
                        e.printStackTrace();
                    }
                    return null;
                })
                .toArray(URL[]::new);

        ClassLoader loader = URLClassLoader.newInstance(urls, App.class.getClassLoader());
        try {
            Thread.currentThread().setContextClassLoader(loader);
            Class<?> mainClass = Class.forName("worder.gui.AppEntry", false, loader);
            var method = mainClass.getMethod("launch", Class.class, String[].class);
            SwingUtilities.invokeLater(() -> {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                launcherUi.dispose();
            });
            method.invoke(null, mainClass, new String[0]);
        } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
            e.printStackTrace();
        }
    }

    private static void processArguments(String[] args) {
        Arrays.stream(args)
                .map(it -> {
                    var launcherArgument = LauncherArgument.valueOf(it);
                    var index = it.indexOf("=");
                    launcherArgument.value = it.substring(index + 1);
                    return launcherArgument;
                })
                .forEach(it -> it.action.execute());
    }

    private static void setCustomWorderHome() {
        DescriptorsHandler.worderHome = LauncherArgument.WORDER_HOME.value;
        DescriptorsHandler.useCustomWorderHome = true;
    }


    enum LauncherArgument {
        WORDER_HOME(
                "--worder-home",
                "Uses specified catalog as a Worder Home Catalog.",
                App::setCustomWorderHome
        );


        private final String name;
        private final String description;
        private final Action action;
        private String value;


        LauncherArgument(String name, String description, Action action) {
            this.name = name;
            this.description = description;
            this.action = action;
        }
    }
}
