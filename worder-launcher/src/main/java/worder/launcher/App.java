/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <App.java>
 * Created: <04/08/2020, 07:03:59 PM>
 * Modified: <30/10/2020, 09:47:25 PM>
 * Version: <242>
 */

package worder.launcher;

import worder.commons.AppDescriptor;
import worder.launcher.ui.LauncherUI;

import javax.swing.*;
import java.lang.reflect.InvocationTargetException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

public class App {
    public static void main(String[] args) {
        AppDescriptor.Builder appDescriptorBuilder = new AppDescriptor.Builder();
        LauncherUI launcherUi = new LauncherUI();
        launcherUi.show();

        runWorder(Path.of("/home/yevhenii/WorderDeployTest/"), launcherUi);
    }

    public static void runWorder(Path worderHomeCatalog, LauncherUI launcherUi) {
        URL[] urls = Arrays.stream(Objects.requireNonNull(worderHomeCatalog.resolve("artifacts").toFile().listFiles()))
                .map(file -> {
                    try {
                        return file.toURI().toURL();
                    } catch (MalformedURLException e) {
                        e.printStackTrace();
                    }
                    return null;
                })
                .toArray(URL[]::new);

        ClassLoader loader = URLClassLoader.newInstance(urls, App.class.getClassLoader());
        try {
            Thread.currentThread().setContextClassLoader(loader);
            Class<?> mainClass = Class.forName("worder.gui.AppEntry", false, loader);
            var method = mainClass.getMethod("launch", Class.class, String[].class);
            SwingUtilities.invokeLater(() -> {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                launcherUi.dispose();
            });
            method.invoke(null, mainClass, new String[0]);
        } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
            e.printStackTrace();
        }
    }

    private static void test(ClassLoader loader) {
        try {
            var classes = List.of(
                    Class.forName("worder.gui.AppEntry", false, loader),
                    Class.forName("tornadofx.App", false, loader),
                    Class.forName("tornadofx.AppKt", false, loader),
                    Class.forName("javafx.application.Application", false, loader)
            );

            classes.forEach(cl -> {
                System.out.println(cl.getSimpleName() + "(" + cl.getCanonicalName() + ")");
                Arrays.stream(cl.getMethods())
                        .filter(method -> method.getName().contains("launch"))
                        .forEach(System.out::println);

                System.out.println();
                System.out.println();
            });
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
