/**
 * Stamp was generated by <StampedFile.kt>
 * Last time was modified by <StampedFile.kt>
 *
 * Name: <SimpleLogger.java>
 * Created: <12/11/2020, 05:06:22 PM>
 * Modified: <15/11/2020, 03:10:15 PM>
 * Version: <164>
 */

package worder.launcher.logging;

import worder.commons.IOExchanger;
import worder.commons.OS;
import worder.launcher.model.WorderRunner;

import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;

public class SimpleLogger {
    private final WorderRunner.RunningType runningType;
    private final IOExchanger worderDistribution;
    private final IOExchanger worderHome;
    private final String launcherVersion;
    private final String[] launcherArgs;
    private final PrintWriter uiLogWriter;


    public SimpleLogger(
            IOExchanger worderDistribution,
            IOExchanger worderHome,
            String launcherVersion,
            String[] launcherArgs,
            WorderRunner.RunningType runningType
    ) throws Exception {
        this.worderDistribution = worderDistribution;
        this.worderHome = worderHome;
        this.launcherVersion = launcherVersion;
        this.launcherArgs = launcherArgs;
        this.runningType = runningType;

        var uiLogFile = new File(worderHome.getRootURI().resolve("logs/launcher-ui.log"));
        //noinspection ResultOfMethodCallIgnored
        uiLogFile.getParentFile().mkdirs();
        uiLogWriter = new PrintWriter(uiLogFile);
    }


    public void initLogging() throws Exception {
        createInitLogFile();
        bindToStandardOut();
    }

    public void log(String prefix, String message) {
        uiLogWriter.printf(
                "[%s] [%s-%s] %s%n",
                LocalDateTime.now().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)),
                Thread.currentThread().getName(),
                prefix,
                message
        );
        uiLogWriter.flush();
    }


    private void createInitLogFile() throws Exception {
        Map<String, String> properties = new LinkedHashMap<>();
        properties.put("Launch DateTime", LocalDateTime.now().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)));
        properties.put("Launcher Version", launcherVersion);
        properties.put("Used OS", OS.getCurrentOS().toString());
        properties.put("Used JRE", Runtime.version().toString());
        properties.put("Used Worder Home", worderHome.toString());
        properties.put("Used Worder Distribution", worderDistribution.toString());
        properties.put("Running Type", runningType.toString());
        properties.put("Passed Args", Arrays.toString(launcherArgs));

        var maxLen = properties.keySet()
                .stream()
                .mapToInt(String::length)
                .max()
                .orElseThrow();

        StringBuilder sb = new StringBuilder();
        properties.forEach((key, value) -> sb.append(key).append(": ").append(" ".repeat(maxLen - key.length() + 3)).append(value).append("\n"));

        worderHome.uploadFile("logs/launcher-init.log", sb.toString().getBytes(), true);
    }

    private void bindToStandardOut() throws Exception {
        var logFile = new File(worderHome.getRootURI().resolve("logs/launcher-out.log"));

        System.setOut(
                new PrintStream(
                        new TeeOutputStream(
                                System.out,
                                new PrintStream(logFile)
                        )
                ));
    }
}
